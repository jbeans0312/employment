--RENAME JOB_HISTORY TO EMPLOYMENT 
ALTER TABLE JOB_HISTORY
RENAME TO EMPLOYMENT;

--CREATE SALARY/COMMISION TABLE
CREATE TABLE SALARY_COMMISSION 
(
  SAL_COMM_ID NUMBER (6) NOT NULL 
, EMPLOYEE_ID NUMBER (6)
, START_DATE DATE
, SALARY NUMBER (8,2)
, COMMISSION_PCT NUMBER (2,2)
, CONSTRAINT SALARY_COMMISSION_PK PRIMARY KEY 
  (
    SAL_COMM_ID 
  )
  ENABLE 
);
/
--CREATE SEQUENCE FOR SALCOMM ID
CREATE SEQUENCE SAL_COMM_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 99999999999
MINVALUE 1;
/

--CREATE TRIGGER FOR SALCOMM ID
CREATE OR REPLACE TRIGGER SAL_COMM_ID_TRG
BEFORE INSERT OR UPDATE ON SALARY_COMMISSION
FOR EACH ROW
BEGIN
    :new.SAL_COMM_ID := SAL_COMM_SEQ.nextval;
END;
/
--GET EMPLOYEE_ID's AND CORRESPONDING SALARY/COMMISSION_PCT
--INSERT INTO SAL_COMM TABLE
INSERT INTO SALARY_COMMISSION
    (
    EMPLOYEE_ID, 
    START_DATE,
    SALARY, 
    COMMISSION_PCT
    )
SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, COMMISSION_PCT FROM EMPLOYEES;
/

--DROP SALARY AND COMMISSION_PCT FROM EMPLOYEES
ALTER TABLE EMPLOYEES 
DROP COLUMN SALARY;

ALTER TABLE EMPLOYEES 
DROP COLUMN COMMISSION_PCT;

--REMOVE NOT NULL CONSTRAINT FROM END_DATE
ALTER TABLE EMPLOYMENT  
MODIFY (END_DATE NULL);

--CREATE MANAGER_ID COLUMN IN EMPLOYMENT
ALTER TABLE EMPLOYMENT 
ADD (MANAGER_ID NUMBER(6) );

--GET EMPLOYEE_ID, JOB_ID, AND 
--INSERT INTO SAL_COMM TABLE
INSERT INTO EMPLOYMENT
SELECT 
    EMPLOYEE_ID,
    HIRE_DATE AS START_DATE, 
    NULL AS END_DATE,
    JOB_ID,
    DEPARTMENT_ID,
    MANAGER_ID
FROM EMPLOYEES
WHERE
    (
    EMPLOYEE_ID,
    HIRE_DATE
    )
NOT IN (SELECT EMPLOYEE_ID, START_DATE FROM EMPLOYMENT);
/

--DROP JOB_ID, MANAGER_ID, DEPARTMENT_ID FROM EMPLOYEES
ALTER TABLE EMPLOYEES
DROP COLUMN JOB_ID;

ALTER TABLE EMPLOYEES
DROP COLUMN MANAGER_ID;

ALTER TABLE EMPLOYEES
DROP COLUMN DEPARTMENT_ID;

--ADD EMPLOYEE_ID AND START_DATE FK TO SALCOMM TABLE
ALTER TABLE SALARY_COMMISSION
ADD CONSTRAINT SALCOM_EMPT_FK FOREIGN KEY
(
  EMPLOYEE_ID 
, START_DATE 
)
REFERENCES EMPLOYMENT
(
  EMPLOYEE_ID 
, START_DATE 
)
DEFERRABLE INITIALLY DEFERRED
ENABLE;

--ADD MANAGER_ID FK TO EMPLOYMENT
ALTER TABLE EMPLOYMENT
ADD CONSTRAINT EMPT_MNG_ID_FK FOREIGN KEY
(
  MANAGER_ID 
)
REFERENCES EMPLOYEES
(
  EMPLOYEE_ID 
)
DEFERRABLE INITIALLY DEFERRED
ENABLE;

--MAKE CORRECT COLS OF SALCOMM NOT NULL
ALTER TABLE SALARY_COMMISSION  
MODIFY (EMPLOYEE_ID NOT NULL);

ALTER TABLE SALARY_COMMISSION  
MODIFY (START_DATE NOT NULL);

ALTER TABLE SALARY_COMMISSION  
MODIFY (SALARY NOT NULL);

--ADD PHONE NUMBERS TABLE
CREATE TABLE PHONE_NUMBERS 
(
  PHONE_ID NUMBER(6) NOT NULL 
, EMPLOYEE_ID NUMBER(6) NOT NULL 
, PHONE_NUMBER VARCHAR2(20) 
, CONSTRAINT PHONE_NUMBERS_PK PRIMARY KEY 
  (
    PHONE_ID 
  )
  ENABLE 
);

--ADD EMPLOYEE_ID FK TO PHONE NUMBERS TABLE
ALTER TABLE PHONE_NUMBERS
ADD CONSTRAINT EMPLOYEE_ID FOREIGN KEY
(
  EMPLOYEE_ID 
)
REFERENCES EMPLOYEES
(
  EMPLOYEE_ID 
)
DEFERRABLE INITIALLY DEFERRED
ENABLE;

--CREATE SEQUENCE FOR PHONE_ID
CREATE SEQUENCE PHONE_ID_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 99999999999
MINVALUE 1;
/

--CREATE TRIGGER FOR PHONE_ID
CREATE OR REPLACE TRIGGER PHONE_ID_TRG
BEFORE INSERT OR UPDATE ON PHONE_NUMBERS
FOR EACH ROW
BEGIN
    :new.PHONE_ID := PHONE_ID_SEQ.nextval;
END;
/

--GET EMPLOYEE_ID's AND CORRESPONDING PHONE NUMBER
--INSERT INTO PHONE_NUMBERS
INSERT INTO PHONE_NUMBERS
    (
    EMPLOYEE_ID, 
    PHONE_NUMBER
    )
SELECT EMPLOYEE_ID, PHONE_NUMBER FROM EMPLOYEES;
/

--REMOVE PHONE NUMBER FROM EMPLOYEES
ALTER TABLE EMPLOYEES
DROP COLUMN PHONE_NUMBER;

--ADD CHECK CONSTRAINT FOR START AND END DATE
ALTER TABLE EMPLOYMENT
ADD CONSTRAINT START_END CHECK 
(END_DATE >= START_DATE)
ENABLE;

--ADD MIN/MAX SALARY CHECK CONSTRAINT TO JOBS TABLE
ALTER TABLE JOBS
ADD CONSTRAINT MIN_MAX_SALARY_CHK CHECK 
( MAX_SALARY >= MIN_SALARY)
ENABLE;
